No matter the size, all computers have four basic functions: input, processing, output, and storage.
Input
Inputs are information received by a computer. A computer cannot perform a function until it receives input. 
Web developers build interfaces for users to provide input through keyboards, computer mouses, or even touchscreens and microphones. 
Computers can also receive input automatically through devices like sensors.  
The computer must translate the data it receives from the input devices into binary code for the computer to either store or process. 
Binary code, also known as machine code, is a system that represents all data as either 0’s or 1’s (or false/true or off/on). 
It is the only language that a computer can understand.  

Processing
When a computer receives data, in the form of 0’s and 1’s, it must transform that data. The computer transforms the data into anything 
from numbers, to letters, to simple commands. Processing is the series of actions that a computer takes when it receives data. The programs 
that web developers write will tell the computer what to do with the data that it receives. The computer mainly performs logical operations 
because the data is converted into 0’s and 1’s.  

Output
Output is the result of the computer transforming input data, through processing, into usable information. A computer’s output might be letters, 
numbers, photos, videos, or audio. Users can receive this output in different ways including via device screens, speakers, and even external 
devices such as printers. Similarly to input devices, output devices must do some translation. They decode machine code from the computer into a
format that users can understand. 

Storage
Storage refers to how a device retains information. Web developers need to be aware of, and need to know how to use, short-term storage and 
long-term storage.  
Short-term storage, also called volatile memory, stores data while the device is running. Websites store data that web pages will use while the 
user is interacting with it. The data is stored in short-term memory, called random access memory (RAM). For example, suppose you’re developing a 
site that handles inventory for a shipping firm. When a customer enters an order, the web page will hold the data in short-term memory until the 
customer clicks or taps a button to submit the order. In many cases, the web browser will handle storing data in short-term memory. 
Long-term storage will retain information even after the device is powered down. Devices like solid-state drives (SDD) or hard disk drives (HDD) 
are used for long-term storage. Websites create small files that store information called cookies. A cookie stores user-specific data such as the 
last time that the user visited the site, how long before they need to log in again, and other data. The device’s long term storage stores cookies, 
which persist between site sessions. A session is the time a user is on a website in one continuous block of time. 

Hardware
Hardware is the physical components your computer needs to operate. Examples of hardware include the RAM and central processing unit (CPU), which handles processing. 
Some hardware also functions as input/output (I/O) devices. I/O devices are the physical components your computer needs to gather inputs and share outputs. The keyboard,
microphone, and mouse are examples of I/O devices.

Software
The primary software that your computer needs is an operating system (OS). The operating system is like a manager. It enables you to communicate with the computer without 
knowing machine code. It also manages all software and hardware, and acts as a coordinator between the hardware and all systems that are running. Some examples of operating 
systems are Linux, Windows, Android, Apple macOS, and Apple iOS.  
Other software applications, also called programs, are sets of instructions that the computer uses to perform tasks that are beyond the main functions of the operating system. 
Examples of software applications include web browsers, word processors, and image editors.  

Web Browser
The web browser is like the automobile. It has a lot of power and uses complex software to make the web useful. However, without websites, it really can’t do much. The web 
sites and web applications that developers write are like the driver—they tell the browser what to do to make it useful.
Web applications are a hybrid between a software program and a web page. Web applications can run in a browser, but many software developers use a wrapper for web apps. A 
wrapper is software into which a developer can add the code they developed for a website. You might have downloaded an app onto your phone that looks and behaves just like 
the application's website, such as a to-do list app. The phone app has essentially the same code as the website, but it is delivered and operates on your phone through a wrapper. 

Website
A website is a collection of web pages that are all located on the same domain name.
A web page displays information on the internet in the form of text(copy), images, videos, and other elements. In addition to web pages, a website also needs a domain name to
locate it, a browser to view it, and a server to host it.
Front-end developers write the code that renders a website and also enables a user to interact with a website. Some of those interactions trigger a process that directly 
communicates and interacts with servers and the processes that run on them. For example, when you do something as simple as clicking the play button on a video, that begins a 
request to pull the data that makes up the video you want to play from the server. The server then sends that data to your (the client’s) device to render it (a client-side 
process). 
Back-end developers write the code that processes data and performs tasks that send information to and receives information from the browser. For example, a user might use 
natural language to search for all restaurants in a given area. They type, “show me all the Greek restaurants in my home city” into a form. This query along with some location 
data is sent to the server, which uses artificial intelligence and natural language processing technology to produce a result (a server-side process). The result then is sent 
back to the client-side to display to the user. 

Front-end development
Front-end development focuses on developing only the parts of a website that users can see and interact with. A front-end developer creates everything you see on a web page, 
such as text, and buttons. Every interaction that a user has with the website is programmed by a front-end developer.
Search engine optimization (SEO)
Web developers increasingly need to understand how to optimize their websites for search engines so that they appear higher in the rankings and internet users find their sites. 
Developers add metadata to the top of their web pages or websites that describes the content within them. Search engine optimization (SEO) is the process of ensuring that the 
metadata included in the header of a page or site matches the content in the body, adding appropriate information so search engines can properly crawl the site. 

Backend development
Back-end developers focus mainly on servers, applications, and databases. Servers are the computers that send and receive data, applications process requests and responses from
the front end, and databases store and organize all that data. Basically, back-end developers make sure that servers, applications, and databases communicate with each other and 
operate smoothly and quickly. The back end also focuses on the data management and security of the website.
In addition to ensuring servers, applications, and databases are operating as they should, back-end developers also write server-side scripts for dynamic content, develop APIs to 
move data around, and ensure websites and systems are secure and meet security standards. 

Dynamic web pages 
Initially, web pages were static, indicating that a developer had to go into the code each time an update to the content or media is required. Now, web pages can display different 
content based on several different factors. The content displayed on the screen may change based on location, time of day, or even what the user has previously interacted with. 
Back-end developers write server-side scripts to tell the server what rules to follow when delivering dynamic content.  

Application programming interface (API) 
Have you ever logged into a website that let you use your credentials from another site, like your social media or email, to log in?  If so, you have experienced an API in action. 
APIs enable front-end developers to interact with data and services from the server. They also enable two distinct applications to interact with one another and share data. This 
ensures that when data that is passed from between the front-end and back-end or between applications, it can be done securely and predictably. APIs do this by specifying what 
type of request the client can make, and what data the client can expect in return using a secure transmission.  

Payments and personally identifiable information (PII)
It is simple to make payments on a website or fill out a medical history form before an appointment, but many people are still cautious about submitting their credit card numbers 
and personally identifiable information to a website. Back-end developers are responsible for database security and server-side encryption to ensure that their websites are compliant 
with PII and payment card industry (PCI) security standards.  

Network
A modem connects you to the internet. It is a piece of hardware that receives signals from your internet service provider (ISP) and translates these signals into a form that your 
computer understands. A router manages the information sent over the internet. It ensures the delivery of the right information to the intended device. A router takes the internet 
connection from your modem and breaks it up to provide access to the different devices connected to the network.  
When you type a URL in your browser, you are requesting information from another specific destination. Your computer will push your request to your internet service provider (ISP), 
who will use a domain name server (DNS) to translate the URL into a numerical internet protocol (IP) address. The DNS service enables users to use friendly names in the web address 
of the websites they’re trying to reach. Without DNS, instead of using a web address like https://www.ibm.com(opens in a new tab), users would have to remember and type in an IP 
address like, https://23.194.240.52. DNS translates the user-friendly web address to the IP address so users don’t have to worry about the IP address. 
